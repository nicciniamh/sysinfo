#!/usr/bin/env python3
'''
System Information - 
show bar graphs in ascii for CPU, RAM and each file system with a /dev 
device associated or for a list of paths. 

Copyright (c) 2023 Nicole Stevens

'''
import os
import psutil
import sys
import argparse
import time 
import datetime
import psutil
import _thread
import curses
from datetime import timedelta
try:
	import distro
	distroAvail = True
except:
	distroAvail = False

bytes_in, bytes_out, spd_in, spd_out = [0,0,0,0]
stdscr = None

color_enabled = True

BLACK= 0
RED= 1
GREEN= 2
YELLOW= 3
BLUE= 4
MAGENTA= 5
CYAN= 6
WHITE= 7

def color(s,fore,back=BLACK,bold=0):
	''' color a string with ansi colors '''
	global color_enabled
	if color_enabled:
			cstr = f'[{bold};3{fore};4{back}m'
			return f'\x1b{cstr}{s}\x1b[0m'
	else:
		return s
def gatherNetstats():
	global bytes_in
	global bytes_out
	global spd_in
	global spd_out
	n = psutil.net_io_counters();
	bytes_in = n.bytes_recv
	bytes_out = n.bytes_sent	
	_bin = bytes_in
	_bout = bytes_out
	while True:
		n = psutil.net_io_counters();
		spd_in = n.bytes_recv-_bin;
		spd_out = n.bytes_sent-_bout;
		_bin = n.bytes_recv
		_bout = n.bytes_sent
		bytes_in = _bin
		bytes_out = _bout
		time.sleep(1)

def GTKStuff(args):
	import gi
	gi.require_version("Gtk", "3.0")
	from gi.repository import Gtk, GLib, GObject


	class siGtk(Gtk.Window):
		def __init__(self,interval,nosystem,nofilesystems,nousers):
			self.interval = interval
			self.nosystem = nosystem
			self.nofilesystems = nofilesystems
			self.nousers = nousers
			self.username = os.getlogin()
			def createLabel(label=""):
				label = Gtk.Label(label=label)
				label.set_justify(Gtk.Justification.LEFT)
				label.set_margin_start(20)
				label.set_margin_end(20)
				label.set_halign(Gtk.Align.START)
				return label

			hostname = os.uname()[1]
			self.title = f"System Information - {hostname}"

			super().__init__(title=self.title)
			self.vbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=5)
			self.topLabel = createLabel()
			self.vbox.pack_start(self.topLabel,True,True,0)
			self.grid = Gtk.Grid()
			self.vbox.pack_start(self.grid,True,True,0)
			gline = 0
			self.cpuwidgets = []
			if not self.nosystem:
				count = psutil.cpu_count()
				if count > 1:
					nr = 'cores'
				else:
					nr = 'core'
				for i in range(0,count):
					lcpu = createLabel(f"CPU Core {i} ")
					perc = createLabel()
					bar = Gtk.ProgressBar()
					self.cpuwidgets.append({'percent': perc, 'bar': bar})
					self.grid.attach(lcpu,0,gline,1,1)
					self.grid.attach(bar,1,gline,1,1)
					self.grid.attach(perc,3,gline,1,1)
					gline = gline + 1
				
				lram = createLabel('RAM')
				self.ramBar = Gtk.ProgressBar()
				self.ramPercent = createLabel()
				self.grid.attach(lram,0,gline,1,1)
				self.grid.attach(self.ramBar,1,gline,1,1)
				self.grid.attach(self.ramPercent,3,gline,1,1)
				gline = gline + 2
				sep = Gtk.Label()
				sep.set_size_request(-1, 20)
				self.grid.attach(sep,0,gline,5,1)
				gline = gline + 2
			else:
				gline = gline + 1
			if not self.nofilesystems:
				self.parts = {}
				self.grid.attach(createLabel('Mount'),0,gline,1,1)
				self.grid.attach(createLabel("Device"),1,gline,1,1)
				self.grid.attach(Gtk.Separator(orientation=Gtk.Orientation.VERTICAL),0,gline,5,1)
				gline = gline + 1
				for i in getPartitionInfo():
					fso = {
						'mountpoint': 	i['mountpoint'],
						'device': 	i['device'],
						'percent': 	i['usage_percent'],
						'total':	i['total'],
						'used':		i['used'],
						'bar':	Gtk.ProgressBar(),
						'usage': createLabel(f" {i['usage_percent']}%, {i['used']}/{i['total']}")
					};
					l1 = createLabel(i['mountpoint'])
					l2 = createLabel(i['device'])
					self.grid.attach(l1,0,gline,1,1)
					self.grid.attach(l2,1,gline,2,1)
					self.grid.attach(fso['bar'],3,gline,1,1)
					self.grid.attach(fso['usage'],4,gline,1,1)
					self.parts[i['mountpoint']] = fso;
					gline = gline + 1

			self.vbox.pack_start(self.grid,True,True,0)
			usrgrid = Gtk.Grid()
			if not self.nousers:
				self.Users = Gtk.Label()
				usrgrid.attach(self.Users,0,gline,1,1)
				self.Users.set_text(getLoggedInUsers())
			self.vbox.pack_start(usrgrid,True,True,0)
			self.add(self.vbox)

			self.update()
			GLib.timeout_add(self.interval, self.update)


		def update(self):
			global spd_in
			global spd_out
			if distroAvail:
				dos = distro.id()
				codename = distro.codename()
				version = distro.major_version()
				minor = distro.minor_version()
				if minor:
					version = f'{version}.{minor}'

				uname = os.uname()
				system = f'{uname[0]} {uname[2]}'
				dinfo = f'{system} {dos} {codename} {version}'
			else:
				dinfo = ""
			uptime = getUptime()
			timestr = time.strftime('%c')
			loadavg = []
			for l in psutil.getloadavg():
				loadavg.append('{:.2f}'.format(float(l)))
			loadavg = ', '.join(loadavg)
			pinfo = getProcessInformation(self.username)
			usrcnt = int(pinfo['user'])
			sleep = pinfo['sleeping']
			run = pinfo['running']
			pstr = f'{pinfo["count"]} procs, ({run} running, {sleep} sleeping) {pinfo["sys"]} system, {usrcnt} user'
			ssin = formatByteValue(spd_in)
			ssout = formatByteValue(spd_out)
			ns = f'↓{ssin} ↑{ssout}'
			topline = f'{dinfo}\n{timestr}  Up: {uptime} - Load Average {loadavg} {getCpuTemp()} {ns}\n{pstr}'
			self.topLabel.set_text(topline)
			if not self.nosystem:
				p = psutil.cpu_percent(percpu=True)
				for i in range(0,len(p)):
					cper = p[i]
					if cper <= 0:
						cfrac = 0
					else:
						cfrac = cper/100
					if cfrac > 100:
						return True
					cper = '{:.2f}'.format(cper)
					self.cpuwidgets[i]['percent'].set_text(f'{cper}%')
					self.cpuwidgets[i]['bar'].set_fraction(cfrac)

				vm = psutil.virtual_memory()
				vmtot = formatByteValue(vm.total)
				vmav = formatByteValue(vm.available)
				vperstr = '{:.2f}'.format(vm.percent)
				vmper = vm.percent/100
				vmusg = f'{vmav}/{vmtot}'
				self.ramPercent.set_text(f'{vperstr}%, {vmusg}')
				self.ramBar.set_fraction(vmper)

			if not self.nofilesystems:
				for i in getPartitionInfo():
					if i['mountpoint'] in self.parts:
						fso = self.parts[i['mountpoint']]
						fso['usage'].set_text(f" {i['usage_percent']}%, {i['used']}/{i['total']}")
						fso['bar'].set_fraction(i['usage_percent']/100)

			if not self.nousers:
				try:
					self.Users.set_text(getLoggedInUsers())
				except:
					pass

			return True

	if args.interval <= .15:
		istr = '{:.2f}'.format(args.interval)
		dialog = Gtk.MessageDialog(
			flags=0,
			message_type=Gtk.MessageType.ERROR,
			buttons=Gtk.ButtonsType.CLOSE,
			text=f"The interval, {istr}, requested is to low, please use >.15",
		)
		dialog.run()
		sys.exit(1)
	win = siGtk(args.interval*1000,args.nosystem,args.nofilesystems,args.nousers)
	win.connect("destroy", Gtk.main_quit)
	win.show_all()
	Gtk.main()


def getPartitionInfo():
	mounted_filesystems = get_mounted_filesystems()
	parts = []
	for fs in mounted_filesystems:
		if fs['device'].startswith('/dev'):
			parts.append(fs)
	return parts

def getLoggedInUsers():
	users = psutil.users();
	legends = [
		'   USER'.ljust(20),
		'   TTY'.ljust(10),
		'   HOST'.ljust(50)
	]
	usrstrs = [
		f'{len(users)} users logged in',
		' '.join(legends)
	]
	for u in psutil.users():
		usts = [
			'   '+u.name.ljust(20),
			u.terminal.ljust(10),
			u.host.ljust(50),
		]
		usrstrs.append(' '.join(usts))

	return '\r\n'.join(usrstrs)

def getCpuTemp():
	'''
	Use sysfs to get CPU temp. If not available return empty string
	'''
	try:
		if os.path.exists('/sys/class/thermal/thermal_zone0/temp'):
			with open('/sys/class/thermal/thermal_zone0/temp') as f:
				t=float(f.read().strip())
				t = t / 1000;
				return 'Temp {:.2f}\xb0C'.format(t)
	except:
		pass
	return ""

def get_system_uptime():
	'''
	Return a string with human-readable uptime as up <n> days, hh:mm:ss or hh:mm:ss if
	days is zero
	'''
	boot_time = psutil.boot_time()
	current_time = psutil.time.time()
	uptime_seconds = current_time - boot_time
	uptime_timedelta = datetime.timedelta(seconds=uptime_seconds)
	return uptime_timedelta

def format_uptime(uptime):
	"Take the uptime and turn it into days, hours, mins, seconds"
	days = uptime.days
	hours, remainder = divmod(uptime.seconds, 3600)
	minutes, seconds = divmod(remainder, 60)
	return days, hours, minutes, seconds

def getUptime():
	'''
	Get system uptime from procps
	'''
	uptime_timedelta = get_system_uptime()
	days, hours, minutes, seconds = format_uptime(uptime_timedelta)
	hours = f'{hours}'.rjust(2,'0')
	minutes = f'{minutes}'.rjust(2,'0')
	seconds = f'{seconds}'.rjust(2,'0')
	if(days > 0):
		return f"{days} days, {hours}:{minutes}:{seconds}"
	else:
		return f"{hours}:{minutes}:{seconds}"

def formatByteValue(bytes):
	'''
	Format bytes to bytes[G|M|k|b]
	'''
	tb=1024**4
	gig = 1024**3
	meg = 1024**2
	if(bytes >= tb):
		return '{:.1f}T'.format(bytes/tb)
	if(bytes >= gig):
		return '{:.1f}G'.format(bytes/gig)
	if(bytes >= meg):
		return '{:.1f}M'.format(bytes/meg)
	if(bytes >= 1024):
		return '{:.1f}k'.format(bytes/1024)
	return f'{bytes}b'

def find_sdiskpart(path):
	'''
	get a partition object for a path
	'''
	path = os.path.abspath(path)
	while not os.path.ismount(path):
		path = os.path.dirname(path)
	p = [p for p in psutil.disk_partitions(all=True) if p.mountpoint == path.__str__()]
	l = len(p)
	if len(p) == 1:
		return p[0]
	raise False

def listTosdiskparts(plist):
	'''
	convert a list of paths to a list of disparts
	'''
	mounts = []
	parts = []
	for p in plist:
		if not os.path.exists(p):
			raise Exception(f'{p} does not exist');
		mp = find_sdiskpart(p)
		if mp:
			if not mp in mounts:
				mounts.append(p)
				parts.append(mp)
		else:
			raise Exception(f'Cannot find mount point for {p}')
	return parts

def get_mounted_filesystems(parry=None):
	'''
	return a list of mounted file systems either from procps or derived 
	from listTodiskparts
	'''
	mounted_filesystems = []
	if parry:
		partitions = listTosdiskparts(parry)
	else:
		partitions = psutil.disk_partitions(all=True)

	for partition in partitions:
		try:
			usage = psutil.disk_usage(partition.mountpoint)
		except:
			continue;
		try:
			#if not parry: #and '/home' in partition.mountpoint:
			#	continue
			filesystem_info = {
				'mountpoint': partition.mountpoint,
				'device': partition.device,
				'usage_percent': usage.percent,
				'total': formatByteValue(usage.total),
				'used': formatByteValue(usage.used),
			}
			mounted_filesystems.append(filesystem_info)
		except:
			pass

	return mounted_filesystems

def getProcessInformation(username):
	'''
	Return process information.
	'''
	procs = {p.pid: p.info for p in psutil.process_iter(['name', 'username', 'status'])}
	total = len(procs)
	user = 0
	sys = 0
	run = 0
	sleep = 0
	for k,p in procs.items():
		if p["username"] == 'root':
			sys = sys+1
		else:
			user = user + 1
		if p['status'] == 'sleeping':
			sleep = sleep + 1
		else:
			run = run + 1
	return {'count': total, 'user': user, 'sys': sys, 'running': run, 'sleeping': sleep}



progDsc = 'Sysinfo: show system Information and disk usage.'
progEpi = '''
Sysinfo  Copyright (C) 2023 Nicole Stevens.
This program comes with ABSOLUTELY NO WARRANTY.
This is free software, and you are welcome to redistribute it
under certain conditions. 
This program is licenced under GNU GENERAL PUBLIC LICENSE Version 3.
See LICENSE.txt which should have been distributed with this program.
'''


rundir=os.path.dirname(os.path.realpath(sys.argv[0]))
try:
	os.chdir(rundir)
except Exception as e:
	print(f'Cannot change to {rundir}: {e}')
	sys.exit(1)

sys.path.append('.')

def generate_bar_graph(percentage, width=20):
	'''
	generate a bar graph for a percentage width wide 
	'''
	if percentage <= 30:
		fore = GREEN
	elif percentage <= 75:
		fore = YELLOW
	else:
		fore = RED
	filled_blocks = int((percentage / 100) * width)
	empty_blocks = width - filled_blocks
	empty = ' '*empty_blocks

	fill = color('#'*filled_blocks,fore,BLACK,1)
	bar = f'[{fill}{empty}]'
	return bar

def gtkMain(args):
	GTKStuff(args)

row = 0
def cprint(*args):
	global stdscr

	stdscr.addstr(row,*args,end="\r\n")
	row = row + 1;

def tprint(*args):
	print(*args,end='\r\n')

def clear():
	if stdscr:
		stdscr.clear()
		stdscr.move(0, 0)
		row = 0
	else:
		sys.stdout.write('\033[2J\033[1;1H')

def ttyMain(args):
	global spd_in
	global spd_out
	global stdscr
	hostname = os.uname()[1]
	title = f"System Information - {hostname}"
	if args.watch:
		if not args.notitle:
			print(f"\033]0;{title}\007",end="")
		stdscr = curses.initscr()
		stdscr.nodelay(1)
	try:
		termwidth = os.get_terminal_size().columns
	except:
		termwidth = 70
	if args.termwidth != -1:
		termwidth = args.termwidth

	try:
		if len(args.paths):
			mounted_filesystems = get_mounted_filesystems(args.paths)
		else:
			mounted_filesystems = get_mounted_filesystems()
	except Exception as e:
		print(f'Error getting filesystems: {e}',file=sys.stderr)
		sys.exit(1)

	info = []
	mplen = 0
	dvlen = 0
	tlen = 0
	ulen = 0
	run=True
	for fs in mounted_filesystems:
		if fs['device'].startswith('/dev'):
			mplen = max(mplen,len(fs['mountpoint']))
			dvlen = max(dvlen,len(fs['device']))
			tlen = max(tlen,len(fs['total']))
			ulen = max(tlen,len(fs['used']))
			info.append(fs)

	barlen = termwidth - (10+mplen+dvlen+4+tlen+ulen)

	while run:
		if args.watch:
			c = stdscr.getch()
			if c != -1:
				if  c == 27 or c == 113 or c == 81: # esc, q or Q
					curses.echo()
					curses.nocbreak()
					curses.endwin()
					sys.exit(0)
			clear()
		vm = psutil.virtual_memory()
		uptime = getUptime()
		vmtot = formatByteValue(vm.total)
		vmav = formatByteValue(vm.available)
		vmper = vm.percent

		cperc = psutil.cpu_percent()
		vmbar = generate_bar_graph(vm.percent,barlen)
		vmusg = f'{vmav}/{vmtot}'
		if not args.nosystem:
			if args.watch:
				ssin = formatByteValue(spd_in)
				ssout = formatByteValue(spd_out)
				ns = f'↓{ssin} ↑{ssout}'
			else:
				ns = ""
			timestr = time.strftime('%c')
			loadavg = []
			for l in psutil.getloadavg():
				loadavg.append('{:.2f}'.format(float(l)))
			jlen = mplen+dvlen+1
			title = title + ' '*(termwidth-len(title))
			colortitle = color(title,WHITE,BLUE,1)
			tprint(colortitle);
			loadavg = ' '.join(loadavg)
			tprint(color(f'{timestr}  Up: {uptime} - Load Average {loadavg} {ns}\033[K',WHITE,BLUE,1))
			p = psutil.cpu_percent(percpu=True)
			for i in range(0,psutil.cpu_count()):
				cperc = p[i]
				cpubar = generate_bar_graph(cperc,barlen)
				tprint(f'Core {i}'.ljust(jlen),f'{cpubar} {cperc}%')
			ram = 'RAM'.ljust(jlen)
			tprint(f'{ram} {vmbar} {vm.percent}%, {vmusg}')
			tprint("");

		if not args.nofilesystems:
			mpdash = '-'*mplen
			devdash = '-'*dvlen
			bardash = '-'*barlen
			tprint("File systems")
			tprint(f"{'Mount'.ljust(mplen)} {'Dev'.ljust(dvlen)}  Usage");
			tprint(f'{mpdash} {devdash} {bardash}')
			for fs in info:
				p = fs['usage_percent']
				mp = fs["mountpoint"].ljust(mplen)
				dev = fs["device"].ljust(dvlen)
				if(barlen < 10):
					tprint('Screen too small',file=sys.stderr)
					sys.exit(1)
				bar = generate_bar_graph(p,barlen)
				tprint(f"{mp} {dev} {bar} {p}% {fs['used']}/{fs['total']}")
			tprint("");


		if not args.nousers:
			try:
				tprint(getLoggedInUsers())
				print("");
			except:
				pass

		if not args.watch:
			run = False
		else:
			time.sleep(args.interval)

def main():
	global color_enabled
	parser = argparse.ArgumentParser(description=progDsc,epilog=progEpi)
	parser.add_argument('--gtk',action='store_true', default=False, help='Use GTK interface')
	parser.add_argument('--nocolor',action="store_true", default=False, help="Don\'t use color")
	parser.add_argument('--nofilesystems',action="store_true", default=False, help="Don\'t show disk usage")
	parser.add_argument('--nosystem',action="store_true", default=False,help='Don\'t show system information')
	parser.add_argument('--notitle',action='store_true',default=False,help="Don't set terminal title")
	parser.add_argument('--nousers',action="store_true", default=False, help="Don\'t show logged in users")
	parser.add_argument('--termwidth',type=int, default=-1, metavar="number",help="set terminal size and override terminal check")
	parser.add_argument('-w','--watch',action='store_true',default=False,help='Watch mode')
	parser.add_argument('-i','--interval',type=float,default=1,metavar="seconds",help="Set watch interval, default is 1")
	parser.add_argument('paths', nargs='*', help='Optional list of paths to check.')
	args = parser.parse_args()
	if args.nocolor:
		color_enabled = False
	if args.watch or args.gtk:
		_thread.start_new_thread(gatherNetstats,())
	if args.gtk:
		gtkMain(args)
	else:
		if args.watch:
			try:
				ttyMain(args)
			except Exception as e:
					curses.echo()
					curses.nocbreak()
					curses.endwin()
					print(f"Exception {e} encountered")
					sys.exit(1)
		else:
			ttyMain(args)


if __name__ == "__main__":
	main()
